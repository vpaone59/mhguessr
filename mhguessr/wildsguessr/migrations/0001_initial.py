# Generated by Django 5.2.4 on 2025-07-22 03:02

import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Monster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "game_id",
                    models.CharField(
                        help_text="The ID used by the game files to identify the monster",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("small", "Small Monster"),
                            ("large", "Large Monster"),
                        ],
                        help_text="The monster's category",
                        max_length=20,
                    ),
                ),
                (
                    "species",
                    models.CharField(
                        choices=[
                            ("flying-wyvern", "Flying Wyvern"),
                            ("fish", "Fish"),
                            ("herbivore", "Herbivore"),
                            ("lynian", "Lynian"),
                            ("neopteron", "Neopteron"),
                            ("carapaceon", "Carapaceon"),
                            ("fanged-beast", "Fanged Beast"),
                            ("bird-wyvern", "Bird Wyvern"),
                            ("piscine-wyvern", "Piscine Wyvern"),
                            ("leviathan", "Leviathan"),
                            ("brute-wyvern", "Brute Wyvern"),
                            ("fanged-wyvern", "Fanged Wyvern"),
                            ("amphibian", "Amphibian"),
                            ("temnoceran", "Temnoceran"),
                            ("snake-wyvern", "Snake Wyvern"),
                            ("elder-dragon", "Elder Dragon"),
                            ("cephalopod", "Cephalopod"),
                            ("construct", "Construct"),
                            ("wingdrake", "Wingdrake"),
                            ("demi-elder", "Demi-Elder"),
                        ],
                        help_text="The monster's species",
                        max_length=50,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="The monster's name", max_length=255),
                ),
                (
                    "size",
                    models.JSONField(
                        default=dict,
                        help_text="The monster's base size and crown size breakpoints",
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="The monster's description"),
                ),
                (
                    "features",
                    models.TextField(
                        blank=True,
                        help_text="The 'features' section from the monster guide",
                    ),
                ),
                (
                    "tips",
                    models.TextField(
                        blank=True,
                        help_text="The 'tips' section from the monster guide",
                    ),
                ),
                (
                    "base_health",
                    models.IntegerField(
                        blank=True, help_text="The monster's base health", null=True
                    ),
                ),
                (
                    "locations",
                    models.JSONField(
                        default=list,
                        help_text="The locations in which the monster can be found",
                    ),
                ),
                (
                    "resistances",
                    models.JSONField(
                        default=list,
                        help_text="The monster's elemental and status resistances",
                    ),
                ),
                (
                    "weaknesses",
                    models.JSONField(
                        default=list,
                        help_text="The monster's elemental and status weaknesses",
                    ),
                ),
                (
                    "rewards",
                    models.JSONField(
                        default=list,
                        help_text="Items can be obtained from fighting the monster",
                    ),
                ),
                (
                    "parts",
                    models.JSONField(
                        default=list,
                        help_text="An array of various parts and hitzones on the monster",
                    ),
                ),
                (
                    "ailments",
                    models.JSONField(
                        default=list, help_text="The ailments the monster can inflict"
                    ),
                ),
                (
                    "elements",
                    models.JSONField(
                        default=list,
                        help_text="The elements the monster can use in combat",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Puzzle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(default=datetime.date.today, unique=True)),
                (
                    "monster",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wildsguessr.monster",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="UserGameSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_key", models.CharField(blank=True, max_length=40, null=True)),
                ("is_completed", models.BooleanField(default=False)),
                ("is_won", models.BooleanField(default=False)),
                ("guesses_count", models.IntegerField(default=0)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "puzzle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wildsguessr.puzzle",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("session_key", "puzzle"), ("user", "puzzle")},
            },
        ),
        migrations.CreateModel(
            name="UserGuess",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("guess", models.CharField(max_length=255)),
                ("guess_number", models.IntegerField()),
                ("is_correct", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "puzzle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wildsguessr.puzzle",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wildsguessr.usergamesession",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["guess_number"],
                "unique_together": {("session", "guess_number")},
            },
        ),
    ]
